\documentclass[a4paper,12pt]{report}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{amsmath}
\usepackage{mathrsfs}
\newtheorem{theorem}{Theorem}
\newtheorem{definition}{Definition}
\usepackage[toc,page]{appendix}

\usepackage{listings} %code highlighter
\usepackage{color} %use color
\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
 
%Customize a bit the look
\lstset{ %
backgroundcolor=\color{white}, % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
basicstyle=\footnotesize, % the size of the fonts that are used for the code
breakatwhitespace=false, % sets if automatic breaks should only happen at whitespace
breaklines=true, % sets automatic line breaking
captionpos=b, % sets the caption-position to bottom
commentstyle=\color{mygreen}, % comment style
deletekeywords={...}, % if you want to delete keywords from the given language
escapeinside={\%*}{*)}, % if you want to add LaTeX within your code
extendedchars=true, % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
frame=single, % adds a frame around the code
keepspaces=true, % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
keywordstyle=\color{blue}, % keyword style
% language=Octave, % the language of the code
morekeywords={*,...}, % if you want to add more keywords to the set
numbers=left, % where to put the line-numbers; possible values are (none, left, right)
numbersep=5pt, % how far the line-numbers are from the code
numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
rulecolor=\color{black}, % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
showspaces=false, % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
showstringspaces=false, % underline spaces within strings only
showtabs=false, % show tabs within strings adding particular underscores
stepnumber=1, % the step between two line-numbers. If it's 1, each line will be numbered
stringstyle=\color{mymauve}, % string literal style
tabsize=2, % sets default tabsize to 2 spaces
title=\lstname % show the filename of files included with \lstinputlisting; also try caption instead of title
}
%END of listing package%
 
\definecolor{darkgray}{rgb}{.4,.4,.4}
\definecolor{purple}{rgb}{0.65, 0.12, 0.82}
 
%define Javascript language
\lstdefinelanguage{JavaScript}{
keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break},
keywordstyle=\color{blue}\bfseries,
ndkeywords={class, export, boolean, throw, implements, import, this},
ndkeywordstyle=\color{darkgray}\bfseries,
identifierstyle=\color{black},
sensitive=false,
comment=[l]{//},
morecomment=[s]{/*}{*/},
commentstyle=\color{purple}\ttfamily,
stringstyle=\color{red}\ttfamily,
morestring=[b]',
morestring=[b]"
}
 
\lstset{
language=JavaScript,
extendedchars=true,
basicstyle=\footnotesize\ttfamily,
showstringspaces=false,
showspaces=false,
numbers=left,
numberstyle=\footnotesize,
numbersep=9pt,
tabsize=2,
breaklines=true,
showtabs=false,
captionpos=b
}


\begin{document}

%TITLE PAGE
\begin{titlepage}

	\begingroup
	\centering
	{\huge\bfseries Elliptic Curve Cryptography\par}
	\vspace{1cm}
	{\scshape\Large Dissertation\par}
	\vspace{1.5cm}
	{\scshape\LARGE Integrated Masters of Science \par}
	In\\
	{\scshape\LARGE Applied Mathematics \par}
	\vspace{2cm}
	Submitted by\\
	{\Large\itshape Harsh Kumar Chourasia\par}
	\vspace{0.5cm}
	supervised by\\
	Dr. Ram Krishna Pandey
	\vspace{0.5cm}

	\includegraphics[scale=0.75]{logo}

	\vspace{1cm}

	{\scshape\large Department of Mathematics\par}
	{\scshape\large Indian Institute of Technology, Roorkee\par}
	{\scshape\large Department of Mathematics\par}
	{\scshape\large Roorkee-247667\par}
	\endgroup
\end{titlepage}
%DECLARATION PAGE
\pagenumbering{roman}
\section*{Declaration}
\addcontentsline{toc}{section}{\numberline{}Declaration}
I hereby certify that the work which is being presented in the thesis entitled \textbf{Elliptic Curve Cryptography} in the partial fulfillment of the requirement for the award of the degree of Integrated Master of Science in Applied Mathematics
and submitted to the Department of Mathematics, Indian Institute of Technology Roorkee is an authentic record of my work carried out during a period from January 2022 to April 2022 under the supervision of \textbf{Dr. R.K. Pandey}, Associate Professor, Mathematics Department, Indian Institute of Technology Roorkee.
The matter presented in this report has not been submitted by me for the award of any other degree of this or any other institute.\\\\\\

\begin{tabular}{l}
	Harsh Kumar Chourasia        \\
	I. M.Sc, Applied Mathematics \\
	Department of Mathematics    \\
	IIT Roorkee                  \\
	Date:                        \\
	\bigskip
\end{tabular}

\hrule
\bigskip
\bigskip
\noindent{\large{\textbf{CERTIFICATE}}} \\\\
This is certified that the above statement made by the candidate is  correct to the best of my knowledge.\\\\\\
\vspace{1cm}
\begin{tabular}{l}
	Dr. RK Pandey             \\
	Associate Professor       \\
	Department of Mathematics \\
	IIT Roorkee               \\
	Date:                     \\
\end{tabular}
\cleardoublepage
%ABSTRACT PAGE
\section*{Abstract}
\addcontentsline{toc}{section}{\numberline{}Abstract}
This text discusses Cryptography using Elliptic Curves. It has many practical applications in end-to-end encryption, data and password storing, and blockchain technology. This dissertation aims to understand how the elliptic curve is used for cryptography. This dissertation is divided into five chapters. The first chapter discusses the fundamental concepts from abstract algebra and number theory that are required to study elliptic curve cryptography. The second chapter provides an introduction to cryptography and elliptic curves. The third chapter deals with the Elliptic Diffie-Hellman key exchange. The fourth chapter discusses the implementation of Elliptic Curves using javascript. Finally, the fifth chapter is used to conclude the report.
\cleardoublepage
%ACKNNOWEDGMENTS PAGE	
\section*{Acknowledgments}
\addcontentsline{toc}{section}{\numberline{}Acknowledgments}
I would like to thank my supervisor, Ram Krishna Pandey, Department
of Mathematics, Indian Institute of Technology Roorkee, for allowing me to work under his guidance. His scholarly advice, meticulous scrutiny, and encouragement have helped me greatly accomplish this task.

I would finally like to thank Prof Premananda Bera, Head of Department, Department of Mathematics, Indian Institute of Technology, for permitting me to carry out this work at IIT Roorkee.\\\\\\
\begin{tabular}{l}
	Harsh Kumar Chourasia        \\
	I. M.Sc, Applied Mathematics \\
	Department of Mathematics    \\
	IIT Roorkee                  \\
	Date:                        \\
\end{tabular}

\cleardoublepage


\tableofcontents
\thispagestyle{empty}
\cleardoublepage
\
\setcounter{page}{1}
\pagenumbering{arabic}

\chapter{Fundamental concepts}
\large{
	For understanding Elliptic Curve Cryptography basic understanding of Abstract Algebra, Number Theory, and probability is required. This chapter discusses the definition of algebraic structures such as group, ring, and field and the statement and proof of the famous Fermat's Little Theorem. 
}\\
\section{Group}
\begin{definition}
	The set  $G$ equipped with single operation $*$ such the four  properties given below are satisfied is called a Group.\\
	$(1)$ Closure: $\forall x,y \in G, x*y \in G$ \\
	$(2)$ Additive identity: $\exists 0 \in G$, such that $ \forall x \in G$, $ 0*x=x*0=x$\\
	$(3)$ Associative Property: $ \forall x,y,z \in G$, $(x*y)*z=x*(y*z)$ \\
	$(4)$ Inverse: $ \forall x \in S, \exists y \in G$ such that$x*y=0$ where $y$ is known as inverse of $x$ and is denoted by $x^{-1}$
\end{definition}
\cleardoublepage
\subsection{Abelian Group}
\begin{definition}
	The set $G$ is equipped with single operation $*$ such the properties given below are satisfied is called a Abelian Group.\\
	$(1)$ Closure: $\forall x,y \in G, x*y \in G$ \\
	$(2)$ Additive identity: $\exists 0 \in G$, such that $ \forall x \in G$, $ 0*x=x*0=x$\\
	$(3)$ Associative Property: $ \forall x,y,z \in G$, $(x*y)*z=x*(y*z)$ \\
	$(4)$ Commutative Property: $ \forall x,y \in G$, $x*y=y*x$ \\
	$(5)$ Inverse: $ \forall x \in G, \exists y \in G$ such that $x*y=0$ where $y$ is known as inverse of $x$ and is denoted by $x^{-1}$
\end{definition}
So, a abelian group G is a group with $\forall x,y \in G, x*y=y*x$

\section{Ring}
\begin{definition}
	Ring is a set $R$ with two operations $+$ and $*$ which satisfy the below properties\\
	$(1)$ It is abelian group under $+$ \\
	$(2)$ Closure under $*$:  $x,y \in R \Rightarrow	x*y \in R $  \\
	$(3)$ Associative under $*$: $x,y,z \in R \Rightarrow	(x*y)*z=x*(y*z) $\\
	$(4)$ Distributive property $x,y,z \in R$
	$$x*(y+z)=x*y+x*z$$ $$(x+y)*z=x*z+y*z$$
\end{definition}
\section{Field}
\begin{definition}
	Field is a set $F$ with two operations $+$ and $*$ with following properties \\
	$(1)$Commutative group under $+$\\
	$(2)$Commutative group under $*$\\
	$(3)$Distributive property $x,y,z \in F$
	$$x*(y+z)=x*y+x*z$$ $$(x+y)*z=x*z+y*z$$
\end{definition}
\section{Fermatâ€™s little theorem}
\begin{theorem}
	Let p be any prime number. For any number a such that $p\nmid a$. Then
	$a^{p-1}\equiv 1\pmod p$\\
\end{theorem}
\begin{proof}
Assume p is a prime number and $p \nmid a$ \\
Every integer is congruent to one of $0,1,2,\cdots,p-1\pmod p$\\
Only focus on non zero congruence classes, because $0 \pmod p$ contains all the multiples of p (and $p \nmid a$).
Focus on $0,1,\cdots,p-1$\\
Multiply all of these by a:
$$a,2a,\cdots,(p-1)a$$
Show that this is a rearrangement of $0,1,2,\cdots,p-1$\\
Case 1: None of these are congruent to 0.\\
Suppose $r.a\equiv 0 \pmod p$\\
Then $p\nmid r.a$, but this is impossible since $p\nmid a$ and $r<p$\\
Case 2: These are distinct, no two are congruent to each other.\\
Pick two values $r.a$,$s.a$\\
$$0<r<p$$
$$0<s<p$$
Let's show that $r.a \not\equiv s.a \pmod p$\\
So look at $r.a-s.a=(r-s).a$. As $p\nmid a$, so can $p \mid (r-s)?$\\
$$0<r<p$$
$$-p<-s<0$$
Adding these inequalities gives you:
$$-p<r-s<p$$
So, $p\nmid(r-s)$ which means $a,2a,\cdots,(p-1)a$ is a rearrangement of\\ $1,2,\cdots,(p-1).$
$$a,2a,\cdots,(p-1)a\equiv 1,2,\cdots,(p-1) \pmod p$$
$$(p-1)!a^{p-1}\equiv (p-1)! \pmod p$$
$$a^{p-1}\equiv 1 \pmod p$$
\end{proof} 


\cleardoublepage

\chapter{Elliptic Curves and Cryptography}
\section{Introduction to Cryptography}
The written word is the most important invention in human history. However, as long as humans can share information, they also need to hide information. This has led to the invention of cryptography.\\
The word cryptography comes from Greek which means "hidden writing". According to Wikipedia \cite{enwiki:1083919625}, \textbf{Cryptography, or cryptology, is the practice and study of techniques for secure communication in the presence of adversarial behavior.}
\\Some of the application of Cryptography includes:
\begin{itemize}
	\item \textbf{End-to-end Encryption} for e-mail, messaging apps, GSM phones.
	\item \textbf{Storing Data}: One of the most significant consumer applications of cryptography includes Kindle, and iPod, which store books and songs in an encrypted format to protect copyright.
	\item \textbf{Storing Password}: Storing passwords in plain text is not secure. If an attacker gains access to the system, they can read the password. If the password is converted into a hash using a one-way mapping function and stored. Every time a user logs in, the password will be converted into the hash and compared with the stored password.
\end{itemize}
There are main types of cryptography: symmetric key cryptography and asymmetric key cryptography.


\subsection{Symmetric cryptography}
Let Alice want to share a message with Bob. They do so by using a shared key and knowledge of some algorithm to encrypt and decrypt the message. Alice encrypts the message using the key to produce the ciphertext. Now Bob can use the key with the ciphertext to decrypt the message.

In symmetric cryptography, a shared key is used by the sender and receiver.
\vspace{2cm}

\begin{figure}[h!]
	\begin{center}
		\caption{A message exchange using a common key K}
		\includegraphics[scale=0.37]{sym}
	\end{center}
\end{figure}
\vspace{2cm}
\subsection{Asymmetric cryptography}
Asymmetric cryptography works by using private and public key pairs.
Each user has a private, public key pair. The public key can be shared freely across the network and is used to verify the owner of a message.
The private key is not transmitted across the network. Public key are used to encrypt the message and the private key is used to decrypt the message. The major advantage of asymmetric cryptography is that there is no need for a shared key. \\\\\\\\

\begin{figure}[h!]
	\begin{center}
		\caption{A message exchange using private and public keys}
		\includegraphics[scale=0.42]{asym}
	\end{center}
\end{figure}
\cleardoublepage

\section{Elliptic Curves}
Equation of type $ y^2 = x^3+ax+b $ are called Weierstrass equation. It is named after Karl Weierstrass $(1815-1897)$ who studied them in $19^{th}$ century. \\\\
\begin{definition}
	Elliptic curves are solution sets of Weierstrass equations
	$$E:y^2 = x^3+ax+b ...(1)$$ with  $ \{\ \mathscr{O}  $ \}\ where $\Delta_E = 4a^3+27b^2\neq 0$.
	$\Delta_E \neq 0$ guarantees that the equation $x^3+ax+b$ has no repeated roots i.e.
	$ x^3+ax+b=(x-e_1)(x-e_2)(x-e_3)$ where $e_1,e_2,e_3$ are distinct. $  \mathscr{O}  $  is defined as the point at infinity which lies on every vertical line.\\
\end{definition}

\begin{figure}[h!]
	\caption{Example of Elliptic Curves}
	\includegraphics[scale=0.30]{Figure_1}
	\includegraphics[scale=0.30]{Figure_2}	
\end{figure}
\cleardoublepage
\begin{figure}[h!]
	\caption{Example of Elliptic Curves}
	\includegraphics[scale=0.30]{Figure_3}
	\includegraphics[scale=0.30]{Figure_4}	
\end{figure}
If (x,y) satisfies eq(1), then (x,-y) is also a solution of equation (1). So, elliptic curves are symmetric about x-axis. \\
The definition of addition "$+$" operator is a not the usual definition one might expect\\
$$(a,b)+(c,d) \neq (a+c,b+d)$$
\\Let $P_1$ and $P_2$ are two points on elliptic curve. If we make a line L that passes through $P_1$ and $P_2$, it will intersect the curve at point $P_3=(x_3,y_3)$. The reflection of $P_3$ from x-axis i.e. $(x_3,-y_3)$ is called the sum of points $P_1$ and $P_2$.\\
\begin{figure}[h!]
	\begin{center}
		\caption{Example of $P_1+P_2$}
		\includegraphics[scale=0.4]{2}
	\end{center}
\end{figure}
\\So, what is $P_1+P_1$? This is the limiting case where $P_2 \to P_1$. Line L becomes the tangent to E at $P_1$. This line will intersect E at $P_3$. The reflection of $P_3$ about x-axis  is $P_1+P_1$.\\
\begin{figure}[h!]
	\caption{Example of $P_1+P_1$}
	\begin{center}
		\includegraphics[scale=0.3]{3}
	\end{center}
\end{figure}
\\Let's look at the case when two points on the curve when $P_1=(x,y)$ and $P_2=(x,-y)$ are added. In this case line L is $x=a$. L will not intersect the curve at third point. In this case we define
$ P_1+P_2= \mathscr{O} $. We define $\mathscr{O}$  as the point in infinity that lies on every vertical line.
If P = (x,y) then -P is defined as (x,-y). So, $P+(-P)=\mathscr{O}$...(2)\\
\begin{figure}[h!]
	\begin{center}
		\caption{Example of $P_1+(-P_1)=\mathscr{O}$}
		\includegraphics[scale=0.3]{1}
	\end{center}
\end{figure}
\begin{theorem}
	Let $P=(x_1,y_1)$ and $Q=(x_2,y_2)$ be two points on elliptic curve $E:Y^2=X^3+
		AX+B$. Then the following are true:
	\begin{enumerate}
		\item If $P=\mathscr{O}$, then $P+Q=Q$
		\item If $Q=\mathscr{O}$, then $P+Q=P$
		\item If $P=-Q$ then $P+Q=\mathscr{O}$
		\item If $P \neq Q$ then $\lambda = (y_2-y_1)/(x_2-x_1)$ and if $P=Q$ then\\ $\lambda = (3x_1^2+A)/(2y_1)$. In both cases,
		      \\$P_1+P_2 = (\lambda ^2 - x_1 - x_2, \lambda (x_1 - x_3)-y_1)$
	\end{enumerate}
\end{theorem}

\begin{proof}
	$(1),(2),(3)$ are true as discussed above.\\
	(4) If $P\neq Q$ then $\lambda$ is the slope of the line passing through $P$ and $Q$. If $P=Q$ then $\lambda$ is the slope of the tangent at $P$. Suppose Line $y=\lambda x+c$ intersects the curve at $(x_3,y_3)$ in addition to $(x_1,y_1)$ and $(x_2,y_2)$.
	$$(\lambda x+c)^2=x^3+Ax+B$$
	$$x^3-\lambda ^2 x^2 +(A-2c\lambda)x+(B-c^2)=(x-x_1)(x-x_2)(x-x_3)$$
	We get $x_3 = \lambda ^2-x_1-x_3$ by comparing the coefficients of $x^2$. $y_3=\lambda x+c=y_1-\lambda(x_1-x_2)$. The ordinate of $P+Q$ is $-y_3=\lambda (x_1 - x_3)-y_1)$
\end{proof}
\begin{theorem}
	Let E be Elliptic curve. Then $E$ forms abelian group under addition. The following statements are true:
	\begin{enumerate}
		\item $P_1+\mathscr{O}=\mathscr{O}+P_1=P_1$ for all $P_1 \in E$
		\item $P_1+(-P_1)=\mathscr{O}$ for all $P_1 \in E$
		\item $(P_1+P_2)+P_3=P_1+(P_2+P_3)$ for all $P_1,P_2,P_3 \in E$
		\item $P_1+P_2=P_2+P_1$ for all $P_1,P_2 \in E$
	\end{enumerate}
\end{theorem}
\begin{proof}
	(1) Claim: $P_1+\mathscr{O}=P_1$ \\
	If a line is drawn through P and $\mathscr{O}$, it will intersect E at -P. Reflection of -P from x-axis is again P. So, $P_1+\mathscr{O}=P_1$
	Similarly, $\mathscr{O}+P_1=P_1$\\
	(2) Explained above in equation (2)\\
	(3) Associative property is non-trivial to prove using geometry. It can be verified by using Theorem 2 by calculation using substitution.\\
	(4) is true as line passing through $P_1$ and $P_2$ is same as the line passing through $P_2$ and $P_1$.
\end{proof}
\section{Elliptic curves over finite fields}
\begin{definition}
	Elliptic curve over a finite field $F_p$ is defined as equation of the form $$E:y^2 = x^3+ax+b$$ where $a,b\in F_p$ and $\Delta_E = 4a^3+27b^2\neq 0$.
\end{definition}
Example:
Let's suppose $a=0$, $b=1$ and $p=11$. \\
$F_{11}=\{0,1,2,3,4,5,6,7,8,9,10\}$.$\{a,b\}\in F_{11}$ and $4*0^2+27*1^3=27\neq 0$. Hence, $E:y^2 = x^3+1 \pmod {11} $ is an elliptic curve over finite field. \\
$E(F_{11}) = \{\mathscr{O},(10,0),(0,10),(0,1),(9,2),(9,9),(2,3),(2,8),(6,8),$\\$(8,4),(8,7),(3,5),(3,6)\}$
	with $|E(F_{11})|=12$
	\begin{theorem}
		Equation of elliptic curve over finite field $F_p$ is $E : Y^2=X^3+
			AX+B$. Let $P=(x_1,y_1)$ and $Q=(x_2,y_2)$ be two points on $E$. If Theorem 2 is applied to points $P$ and $Q$ then the resulting point also lies on $E$.
	\end{theorem}
	\begin{proof}
		Theorem 2 is derived by substituting the equation of line to elliptic curve. So the solution automatically satisfies the elliptic curve. Similarly Theorem 4 is also true.\\
	\end{proof}
	Example: Consider the above example. Let $P=(0,1)$ and $Q=(10,0)$.
$\lambda = \frac{1-0}{0-10} = \frac{1}{-	10} = 1 \pmod{11}$,$x_3=1-0-10=-9=2 \pmod{11}$\\ $y_3=1(0-(2))-1=-3=8$ and $(2,8) \in E$ \begin{theorem}
		The elliptic curve over finite field along with addition property forms finite group.
	\end{theorem}

	
	\section{Elliptic curve discrete logarithm problem}

	\begin{definition}
		Let $(G,.)$ be a group and $g$ be the generator of the group and $h\in G$ such that $$g^x=h$$
		$x$ is called discrete logarithm of $h$ base $x$ and is denoted by $x=log_g h$.
	\end{definition}
	Elliptic curve group operation is addition as described above.So, in case of elliptic curve discrete logarithm problem is described as follows:
	Let $P,Q \in E$ such that $nP=Q$. $n$ is called elliptic discrete logarithm of $Q$ base $P$ and is denoted by $n =\log_P Q$.

	It should be noted that if $Q$ is not multiple of $P$, then $n$ will not be defined. However, for all practical purposes, $Q$ is obtained from repeatedly adding $P$. So $n$ will exist.

	We also note that in every finite group every element has finite order. Let order of $P$ be $s$ i.e. $s P=\mathscr{O}$. If $n_0$ is the smallest number satisfying $Q=sP$. Then for all $n=n_0+is$ $ \forall i \in \mathbb{Z} $, $Q=nP$.It implies $\log_P Q$ is an element of  $\mathbb{Z}/s\mathbb{Z}$.We could also set the value to be $n_0$.But if we define the value to be in $\mathbb{Z}/s\mathbb{Z}$ the the following equation is satisfied.
$$\log_P(Q+R)=\log_P(Q)+\log_P(R)$$
Therefore the function
$log_P:E(F_p)\rightarrow \mathbb{Z}/s\mathbb{Z}$ defines group homomorphism.
\subsection{Double and Add Algorithm}
The value of $n$ in $Q=nP$ is large for practical application.If $nP$ is calculated by adding $P$ repeatedly $n$ number of times, it will $O(n)$ operation. Suppose $n$ has $k$ binary digits. Then the complexity will be $O(2^k)$. By the use of double and add algorithm we can reduce the complexity to $O(\log {n})$ or $O(k)$.\\
Take $n=151$. Binary representation of 151 is $10010111_2$.
$$151=1.2^7+0.2^6+0.2^5+1.2^5+0.2^4+1.2^3+1.2^2+1.2^1+1.2^0$$
$$or$$
$$151P = 2^7P+2^4P+2^2P+2^1P+2^0P$$
Obtain $151P$ using double and add algorithm
\begin{enumerate}
	\item Start with $P$
	\item Double it to get $2P$ ($P+P$)
	\item Add $2P$ to $P$ (result will be $2^1P+2^0P$)
	\item Double $2P$ to get $4P$ ($2P+2P$)
	\item Add $4P$ to the result (result will be $2^2P+2^1P+2^0P$)
	\item Double $4P$ to get $8P$ ($4P+4P$)
	\item Double $8P$ to get $16P$ ($8P+8P$)
	\item Add $16P$ to the result (result will be $2^4P+2^2P+2^1P+2^0P$)
	\item Keep Doubling $16P$ till $128P$ is obtained
	\item Add $128P$ to the result (result will be $2^7P+2^4P+2^2P+2^1P+2^0P$)
\end{enumerate}
We obtained $151P$ using only four addition and seven doubling operation!
\\\\\\
\textbf{Pseudo-code of double and add algorithm}\\
Let $n=n_0+2n_1+2^2n_2+...+2^mn_m$ where $n_0,...n_m \in \{0,1\}$\\$m =\lfloor \log_2 {n} \rfloor$
\begin{enumerate}
	\item $bits = [n_0,n_1,...n_m]$
	\item $result=\mathscr{O}$ \hspace{10mm} //  infinity point
	\item $temp=P$
	\item for bit in bits:
	\item \hspace{10mm}  if bit == 1:
	\item \hspace{10mm} \hspace{10mm}  result = result + temp \hspace{10mm}// addition operation
	\item \hspace{10mm} temp = temp + temp \hspace{10mm}  // doubling operation
	\item return result
\end{enumerate}
\subsection{Hasse's Theorem}
Hasse's theorem estimates the number of points in an elliptic curve over a finite field. We state Hasse's theorem without proof.
\begin{theorem}
	Let $N$ is the number of points on an Elliptic Curve $E$ over finite field $F_q$. Then the following inequality is true
	$$|N-(q+1)|<2\sqrt{q}$$
	$$or$$
	$$q+1-2\sqrt{q}<N<q+1+2\sqrt{q}$$
\end{theorem}

\subsection{How to solve ECDLP}

Suppose  $P$ and $Q$ are points on an Elliptic Curve $E$ over finite field $F_p$ such the $Q=nP$. The value of $P$ and $Q$ are known and we wish to find the value of $n$.\\\\
\textbf{Exhaustive Search Method}\\
Compute the value of $P,2P,3P...$ until you find a multiple such that it is equal to $Q$. Time complexity of this algorithm is $O(p)$.\\\\
\textbf{Collision Search Method}\\
Compute two lists for randomly chosen integers $m_1, m_2, . . .m_r$ and $n_1, n_2, . . .n_r$ where each integer is between $1$ and $p$.\\
List 1: $m_1 P, m_2 P, . . .,m_r P$\\
List 2: $n_1 P + Q, n_2 P + Q, . . ., n_r P + Q$\\
As soon as we find $m_u P$ and $m_v P + Q$ such that $m_u P = m_v P + Q$, then $Q = (m_v - m_u) P $ i.e. $n=m_v - m_u$. Time complexity of collision search method is $O(\sqrt{p})$ by the birthday paradox\cite{hoffstein2008introduction}.\\\\
The value of $p$ is taken very large for practical purpose. For example, Secp256k1 is the name of the elliptic curve used by Bitcoin to implement its public key cryptography. The value of $p$ used by it is $p = 2^{256} â€“ 2^{32} â€“ 2^9 â€“ 2^8 â€“ 2^7 â€“ 2^6 â€“ 2^4 â€“ 1$.
\cleardoublepage
\chapter{Elliptic Diï¬ƒeâ€“Hellman key exchange}
The biggest problem of symmetric cryptography is sharing of private keys. Historically secret key used to be shared physically. After that, public channels were used to share the encrypted message. Diffie-Hellman key exchange helps the sender and receiver of the message to exchange cryptographic keys over a public channel securely. Its security does depend on mathematical principles. \\\\
Elliptic Diï¬ƒe-Hellman Key Exchange Algorithm
\begin{enumerate}
	\item A large prime number $p$, an Elliptic Curve $E$ over $F_p$ and a point $P \in E(F_p)$  is shared between Ram and Shayam over public channel.
	\item Ram chooses a large random number $n_R$ and computes $Q_R = n_R P$
	\item Shayam chooses a large random number $n_S$ and computes $Q_S = n_S P$
	\item Ram and Shayam shares $Q_R$ and $Q_S$ over the public channel.
	\item Ram now computes $n_R Q_S$ and Shayam computes $n_S Q_R$
	\item The shared secret key is $Q=n_R Q_S=n_R (n_S P)=n_S (n_R P)=n_S Q_R$
\end{enumerate}
Suppose Ghanshyam wants to obtain the secret key. Ghanshyam knows the value of $P$, $Q_R$, $Q_S$ as they are available on the public channel. Ghanshyam can solve Elliptic Curve Discrete Logarithm Problem, i.e., the equation $Q_R = n_R P$ or $Q_S = n_S P$ to obtain the value of $n_R$ and $n_S$ respectively. After the value of $Q$ can be obtained using the formula $Q=n_R Q_S$ or $Q=n_S Q_R$. However, we know that the best-known algorithm to solve EDCLP has time complexity $O(\sqrt{p})$. If $p$ is chosen very large, then it is not practically feasible to solve EDCLP.\\\\
\textbf{Example}
Ram and Shayam want to exchange a secret key using the Diffie-Hellman Algorithm with the following curve, prime and point.
$p=7$
$E:y^2=X^3+1$
$P=(2,3) \in E(F_7)$\\
Ram and Shayam choose their random secret key as $n_R=5$ and $n_S=3$.\\
Ram computes $Q_R = n_R P = 5(2,3)=(2,4) \in E(F_7)$\\
Shayam computes $Q_S = n_S P = 3(2,3)=(6,0)\in E(F_7)$\\
Ram and Shayam will share the value of $Q_R$ and $Q_S$ with each other.\\
Ram computes $n_R Q_S= 5 (6,0) = (6,0)$\\
Shayam computes $n_S Q_R= 3 (2,4) = (6,0)$\\
Ram and Shayam have shared the secret key $(6,0)$. They will use x-coordinate as the shared key and ignore y-coordinate.
\cleardoublepage
\chapter{Implementation}
This chapter deals with the implementation of ECC using javascript. 
\\\\
\begin{lstlisting}[language=JavaScript]
INF_POINT = null;
class EllipticCurve {
  constructor(a, b, p) {
    this.a = a;
    this.b = b;
    this.p = p;
    this.points = [];
    this.definePoints();
  }

  definePoints() {
    this.points.push(INF_POINT);
    for (let x = 1; x < this.p; x++) {
      for (let y = 1; y < this.p; y++) {
        if (this.equalModP(y ** 2, x ** 3 + this.a * x + this.b)) {
          this.points.push([x, y]);
        }
      }
    }
  }

  add(p, q) {
    if (p == null) {
      return q;
    }
    if (q == null) {
      return p;
    }

    const x1 = p[0];
		    const y1 = p[1];
		    const x2 = q[0];
		    const y2 = q[1];
    let lambda;
    if (this.equalModP(x1, x2) && this.equalModP(y1, -y2)) {
      return INF_POINT;
    }
    if (this.equalModP(x1, x2) && this.equalModP(y1, y2)) {
      lambda = this.reduceModP((3 * x1 * x1 + this.a) * this.inverseModP(2 * y1));
    } else {
      lambda = this.reduceModP((y1 - y2) * this.inverseModP(x1 - x2));
    }
    const x3 = this.reduceModP(lambda ** 2 - x1 - x2);
    const y3 = this.reduceModP(lambda * (x1 - x3) - y1);
    return [x3, y3];
  }

  doubleAndAddAlgorithm(n, P) {
    let Q = INF_POINT;
    while (n != 0) {
      if (n & 1 !== 0) {
        Q = this.add(Q, P);
      }
      P = this.add(P, P);
      n >>= 1;
    }
    return Q;
  }

  reduceModP(n) {
    while (n < 0) {
      n += this.p;
    }
    return n % this.p;
  }

  equalModP(x, y) {
    return this.reduceModP(x - y) == 0;
  }

  inverseModP(x) {
    for (let y = 1; y < this.p; y++) {
      if (this.equalModP(x * y, 1)) {
        return y;
      }
    }
    return null;
  }
}
ec = new EllipticCurve(0, 1, 7);
console.log(ec.points);
console.log(ec.doubleAndAddAlgorithm(5, [2, 4]));

\end{lstlisting}
\chapter{Conclusion}

\bibliographystyle{plain}
\bibliography{bibliography}
\end{document}



